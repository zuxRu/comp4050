{"ast":null,"code":"var _jsxFileName = \"/Users/lucagonzalez/NetBeansProjects/comp4050Clone/comp4050/src/App.js\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Academics;\nvar ProjectsAloc;\nvar Students;\nvar Supervisors;\nvar Projects;\nvar AllAssigned = [];\nvar Test;\nvar presSched = [];\nvar allocatedProjects;\n\n//luca's globals\nlet projectAllocations = [];\nvar aCIVIL = [];\nvar aCOMP = [];\nvar aELEC = [];\nvar aMECH = [];\nvar aMTRN = [];\nvar aTELE = [];\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.js\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 16\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: markerAlgorithm,\n        children: \"Allocate Markers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: exportMarkerData,\n        children: \"Export Marker Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: presentationScheduler,\n        children: \"Allocate Markers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: exportPresentationData,\n        children: \"Export Presentation Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Learn React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nfunction presentationScheduler() {\n  //Sort allocated Projects by supervisor as a Optimization -> Presentation more likely to have the same supervisor\n  //Problem/edge case: how to prevent same supervisor in multiple rooms at the same time?\n  let allocatedProjects = ProjectsAloc;\n  allocatedProjects.sort((a, b) => {\n    return a.supervisor_ID.localeCompare(b.supervisor_ID, undefined, {\n      numeric: true,\n      sensitivity: 'base'\n    });\n  });\n  //console.log(allocatedProjects);\n\n  /* Schema\n  presentationID        -> +1 every 12 students\n  classroomNumber       -> for MVP, classroomNum = 1,2,3 ... substitues room code\n  time                  -> AM or PM\n  day                   -> Mon Tue or Wed\n  chairID (-1)\n  secondMarkerID (-1) \n  */\n  // To be populated with final Presentation Schedule to print [{...} , {...} , ...]\n\n  //Data to be built according to schema\n  let presIDCounter = 1; //Unique presID = 0,1,2,3 ...\n\n  let dayofWeek = ['Mon', 'Tue', 'Wed']; //preset for MVP\n  let dayCount = 0; // use for idx of dayofweek\n\n  let seshArr = ['AM', 'PM']; //Only 2 sessions/times per day\n  let timeCount = 0; // use for idx of seshArr //redundant/can just use presIDcounter\n\n  // Calculating no of classrooms needed\n  let studentsPerRoomPerSesh = 12; // 3hr sesh, 15min per pres = 12 presentations per sesh per room\n  let allPresPerSesh = studentsPerRoomPerSesh * dayofWeek.length * seshArr.length; //should be 12*3*2 = 72\n  let numberOfClassrooms = Math.ceil(allocatedProjects.length / allPresPerSesh); // no of presentations/persentations per sesh = num of classrooms we need\n  let classroomNum = 1;\n\n  // Implementing chairID and secondMarkerID\n\n  // No idea how this needs to be done\n  // implementing chairID as picking between a predefined list of academics\n  //(that way if kate wants to do all of them she can just self nominate herself and hazer can say which ones he wants working on it)\n  let chairIDarr = [466997, 465796, 466347, 469056, 469004, 463817, 460162, 467174, 465304, 466355, 466074, 465382, 461209, 460413, 469840, 462845, 469302];\n  // setting second marker as the last supervisor in the same sesh, or maybe a predefined array?\n  let secondMarkerIDarr = [466997, 465796, 466347, 469056, 469004, 463817, 460162, 467174, 465304, 466355, 466074, 465382, 461209, 460413, 469840, 462845, 469302];\n\n  //Scheduling Alg\n  for (let i = 0; i < allocatedProjects.length; i++) {\n    if (i % 12 == 0) {\n      //for every batch of 12 students\n      let tempPres = {}; // Used to build object according to schema before pusing onto presSched\n\n      // Update the presentation properties\n      tempPres.presentationID = presIDCounter;\n      tempPres.classroomNumber = classroomNum;\n      tempPres.time = seshArr[timeCount % seshArr.length];\n      tempPres.day = dayofWeek[dayCount % dayofWeek.length];\n\n      //Implementation 1: using preset array of chairID and second Marker IDs\n      //tempPres.chairID = chairIDarr [presIDCounter-1 % chairIDarr.length];\n      //tempPres.secondMarkerID = secondMarkerIDarr [presIDCounter-1 % secondMarkerIDarr.length];\n\n      //implementation 2:\n      //could also allocate chair as whoever's supervising in that sesh first\n      tempPres.chairID = allocatedProjects[i].supervisor_ID;\n      //second marker could be the last supervisor in the same sesh.\n      if (allocatedProjects[i + 11] && allocatedProjects[i + 11].supervisor_ID) {\n        tempPres.secondMarkerID = allocatedProjects[i + 11].supervisor_ID;\n      } else {\n        //if not enough people in the sesh,\n        tempPres.secondMarkerID = allocatedProjects[i].supervisor_ID; // make second marker same as first supervisor\n      }\n\n      // Add the presentation to the schedule\n      presSched.push(tempPres);\n\n      /*\n      ==>Order of change: time, classroom then day. \n      e.g.\n      For 2 classrooms C1 and C2, the presID 1,2,3 ... should represent\n      MonC1AM, MonC1PM, MonC2AM, MonC2PM, TueC1Am ... \n      */\n\n      // Increment counters based on the desired order of change\n      timeCount++;\n      if (timeCount % seshArr.length === 0) {\n        //AM/PM switch\n        classroomNum++;\n      }\n      if (classroomNum > numberOfClassrooms) {\n        //Cycles through classrooms\n        classroomNum = 1;\n        dayCount++;\n      }\n\n      // Increment presentation ID for each batch of students\n      presIDCounter++;\n    }\n    // Assign presentation ID to the allocated project\n    allocatedProjects[i].presentation_ID = presIDCounter - 1;\n  }\n  console.log(presSched);\n  console.log(allocatedProjects);\n}\nfunction markerAlgorithm() {\n  Students = addStudentDisciplines();\n  Academics = addAcademicCaps();\n  addSupervisorCap();\n  sortAcademics();\n  Students = getUnitDiscipline();\n  ProjectsAloc = addStUnitDisToPA();\n  ProjectsAloc = addMarkers(ProjectsAloc);\n  ProjectsAloc = addMarkersEdgeCases(ProjectsAloc);\n  loadBalance(Academics);\n  console.log(Academics);\n  console.log(ProjectsAloc);\n}\n////////////////////////////////////\n\nasync function allocateProjects() {\n  const api_url = 'tba';\n  let students = (await fetch('Student.json')).json();\n  students.sort((a, b) => parseFloat(b.st_WAM) - parseFloat(a.st_WAM));\n  let allProjects = await fetch('Projects.json').json();\n  let supervisors = await fetch('Academic.json').json();\n  console.log('allProjects');\n  let selfProposed = await fetch('SelfProposedProject.json').json();\n  let preferences = (await fetch('Preferences.json')).json();\n  let disciplines = (await fetch('Discipline.json')).json();\n  let unallocatable = [];\n  let allocTemp = {};\n  let superIDX;\n  let allocated = false;\n  let numberOfruns = 0;\n  for (let i = 0; i < students.length; i++) {\n    numberOfruns++;\n    allocated = false;\n    let selfie = hasSelfProposed(students[i].st_ID, selfProposed);\n    if (selfie != -1) {\n      superIDX = findSupervisorIDX(selfProposed[selfie].sp_supervisor_ID, supervisors);\n      if (superIDX >= 0) {\n        if (supervisors[superIDX].s_capacity < supervisors[superIDX].s_current_load) {\n          //find out if s_capacity is maxCapacity or current???\n          //atm treating as current.\n\n          supervisors[superIDX].s_current_load++;\n          allocTemp.s_ID = students[i].st_ID;\n          allocTemp.supervisor_ID = selfProposed[selfie].sp_supervisor_ID;\n          allocTemp.project_ID = -1; //find out if i add projects from self proposed to allProjects after allocation. And give it an ID\n          allocTemp.second_marker_ID = -1;\n          allocTemp.presentation_ID = -1;\n          projectAllocations.push(allocTemp);\n          allocTemp = {};\n          continue;\n        }\n      }\n    }\n    let prefIDX = findPreferencesIDX(students[i].st_ID, preferences);\n    if (prefIDX != -1) {\n      for (let j = 1; j < 5; j++) {\n        let strKey = 'pr_pref' + j;\n        let projectIDX = findProjectIDX(preferences[prefIDX][strKey], allProjects); //can I use strKey like that?\n        if (projectIDX != -1) {\n          if (allProjects[projectIDX].p_size > 0) {\n            superIDX = findSupervisorIDX(allProjects[projectIDX].p_supervisor, supervisors);\n            if (supervisors[superIDX].s_capacity < supervisors[superIDX].s_current_load) {\n              allocTemp.s_ID = students[i].st_ID;\n              allocTemp.supervisor_ID = allProjects[projectIDX].p_supervisor;\n              allocTemp.project_ID = allProjects[projectIDX].p_ID;\n              allocTemp.second_marker_ID = -1;\n              allocTemp.presentation_ID = -1;\n              projectAllocations.push(allocTemp);\n              allocTemp = {};\n              allProjects[projectIDX].p_size--;\n              supervisors[superIDX].s_current_load++;\n              allocated = true;\n              break;\n            }\n          }\n        }\n      }\n\n      //allocate random\n    }\n\n    let numberOfProjectsTried = 0;\n    while (allocated == false) {\n      allocTemp = {};\n      allocTemp.s_ID = students[i].st_ID;\n      let projectIDX = Math.floor(Math.random() * allProjects.length);\n      allocTemp.supervisor_ID = allProjects[projectIDX].p_supervisor;\n      allocTemp.project_ID = allProjects[projectIDX].p_ID;\n      allocTemp.second_marker_ID = -1;\n      allocTemp.presentation_ID = -1;\n\n      //find supervisor allocation weight\n      superIDX = findSupervisorIDX(allocTemp.supervisor_ID, supervisors);\n      if (supervisors[superIDX].s_capacity > 0 && allProjects[projectIDX].p_size > 0) {\n        if (students[i].st_unit == 'COMP4092' && allProjects[projectIDX].p_fields.includes('Software') || students[i].st_unit == 'CIVIL4092' && allProjects[projectIDX].p_fields.includes('Civil') || students[i].st_unit == 'ELEC4092' && allProjects[projectIDX].p_fields.includes('Electrical') || students[i].st_unit == 'ELEC4092' && allProjects[projectIDX].p_fields.includes('Electronics') || students[i].st_unit == 'MECH4092' && allProjects[projectIDX].p_fields.includes('Mechanical') || students[i].st_unit == 'MTRN4092' && allProjects[projectIDX].p_fields.includes('Mechatronics') || students[i].st_unit == 'TELE4092' && allProjects[projectIDX].p_fields.includes('Telecommunications')) {\n          //this condition may cause an infinite loop fix later\n          allProjects[projectIDX].p_size--;\n          supervisors[superIDX].s_current_load++;\n          projectAllocations.push(allocTemp);\n          allocated = true;\n        }\n      }\n      numberOfProjectsTried++;\n      if (numberOfProjectsTried > 1000) {\n        console.log('tried 1000 times could not find a project for this kid');\n        unallocatable.push(allocTemp);\n        break;\n      }\n    }\n  }\n  console.log(unallocatable);\n}\nfunction hasSelfProposed(studnetID, selfPrj) {\n  for (let i = 0; i < selfPrj.length; i++) {\n    if (studnetID == selfPrj[i].sp_student_ID) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n//finds supervisor index based on supervisor id\nfunction findSupervisorIDX(superVisor, superArr) {\n  for (let i = 0; i < superArr.length; i++) {\n    if (superVisor.localeCompare(superArr[i].s_ID)) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction findPreferencesIDX(studentID, prefs) {\n  for (let i = 0; i < prefs.length; i++) {\n    if (studentID == prefs[i].pr_student_ID) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction findProjectIDX(prjIDX, projects) {\n  for (let i = 0; i < projects.length; i++) {\n    if (prjIDX == projects[i].p_ID) {\n      return i;\n    }\n  }\n  return -1;\n}\n////////////////////////////////////////\nconst exportMarkerData = () => {\n  const jsonString = `data:text/json;chatset=utf-8,${encodeURIComponent(JSON.stringify(allocatedProjects))}`;\n  const link = document.createElement('a');\n  link.href = jsonString;\n  link.download = 'data.json';\n  link.click();\n};\nconst exportPresentationData = () => {\n  const jsonString = `data:text/json;chatset=utf-8,${encodeURIComponent(JSON.stringify(presSched))}`;\n  const link = document.createElement('a');\n  link.href = jsonString;\n  link.download = 'data.json';\n  link.click();\n};\n\n// api url\nconst api_url = 'http://time.jsontest.com';\n\n// Defining async function\nasync function getapi(url) {\n  // Storing response\n  const resAcademics = await fetch('Academic.json');\n  const resStudents = await fetch('Student.json');\n  const resProjectsAloc = await fetch('lucasProjectAlloc.json');\n  const resSupervisors = await fetch('Supervisor.json');\n  const resProjects = await fetch('Projects.json');\n  const resTest = await fetch(api_url);\n\n  // Storing data in form of JSON\n  Academics = await resAcademics.json();\n  Students = await resStudents.json();\n  ProjectsAloc = await resProjectsAloc.json();\n  Supervisors = await resSupervisors.json();\n  Projects = await resProjects.json();\n  Test = await resTest.json();\n  console.log(Test);\n}\n\n// Calling that async function\ngetapi(api_url);\nfunction loadBalance(markers) {\n  markers.sort((a, b) => {\n    return b.a_cap - a.a_cap;\n  });\n}\nfunction addStudentDisciplines() {\n  const temp = Students.map(element => {\n    return element = {\n      ...(element.st_unit.includes('CIVIL') && {\n        ...element,\n        st_disciplineID: 1\n      }),\n      ...(element.st_unit.includes('ELEC') && {\n        ...element,\n        st_disciplineID: 3\n      }),\n      ...(element.st_unit.includes('MECH') && {\n        ...element,\n        st_disciplineID: 4\n      }),\n      ...(element.st_unit.includes('MTRN') && {\n        ...element,\n        st_disciplineID: 5\n      }),\n      ...(element.st_unit.includes('COMP') && {\n        ...element,\n        st_disciplineID: 6\n      }),\n      ...(element.st_unit.includes('TELE') && {\n        ...element,\n        st_disciplineID: 7\n      }),\n      ...(element.st_unit.includes('ENGG') && {\n        ...element,\n        st_disciplineID: 8\n      })\n    };\n  });\n  return temp;\n}\nfunction addAcademicCaps() {\n  const temp = Academics.map(element => {\n    return element = {\n      ...{\n        ...element,\n        a_cap: 10\n      }\n    };\n  });\n  return temp;\n}\nfunction getUnitDiscipline() {\n  let partialStudentDetails = Students.map(({\n    st_ID,\n    st_disciplineID,\n    st_unit\n  }) => ({\n    st_ID,\n    st_disciplineID,\n    st_unit\n  }));\n  return partialStudentDetails;\n}\nfunction addStUnitDisToPA() {\n  let combined = [];\n  for (let i = 0; i < ProjectsAloc.length; i++) {\n    combined.push({\n      ...ProjectsAloc[i],\n      ...Students.find(itmInner => itmInner.st_ID === ProjectsAloc[i].st_ID)\n    });\n  }\n  return combined;\n}\nfunction addSupervisorCap() {\n  var temp = Academics.reduce((accum, curr) => {\n    const S = Supervisors.find(s => s.s_ID === curr.a_ID);\n    if (S) {\n      curr.a_cap = S.s_capacity - S.s_current_load;\n    }\n    return accum;\n  });\n  return temp;\n}\nfunction sortAcademics() {\n  for (let element of Academics) {\n    switch (element.a_discipline) {\n      case 1:\n        aCIVIL.push(element);\n        break;\n      case 2:\n        aELEC.push(element);\n        break;\n      case 3:\n        aELEC.push(element);\n        break;\n      case 4:\n        aMECH.push(element);\n        break;\n      case 5:\n        aMTRN.push(element);\n        break;\n      case 6:\n        aCOMP.push(element);\n        break;\n      case 7:\n        aTELE.push(element);\n        break;\n      default:\n        console.log('new unit');\n        break;\n    }\n  }\n}\nfunction allocateMarkers(project, markers) {\n  if (project.second_marker_ID !== -1) {\n    return project;\n  }\n  loadBalance(markers);\n  var next;\n  while (markers.length > 0) {\n    next = markers.shift();\n    if (next.a_ID === project.supervisor_ID) {\n      markers.push(next);\n    } else {\n      if (next.a_cap > 0) {\n        project.second_marker_ID = next.a_ID;\n        next.a_cap--;\n        markers.push(next);\n        return project;\n      }\n    }\n  }\n  return project;\n}\nfunction addMarkers(projects) {\n  projects.reduce((accum, curr) => {\n    const P = Students.find(d => d.st_ID === curr.st_ID);\n    if (P) {\n      if (P.st_unit.includes('CIVIL')) {\n        allocateMarkers(curr, aCIVIL);\n      } else if (P.st_unit.includes('ELEC')) {\n        allocateMarkers(curr, aELEC);\n      } else if (P.st_unit.includes('MECH')) {\n        allocateMarkers(curr, aMECH);\n      } else if (P.st_unit.includes('MTRN')) {\n        allocateMarkers(curr, aMTRN);\n      } else if (P.st_unit.includes('COMP')) {\n        allocateMarkers(curr, aCOMP);\n      } else if (P.st_unit.includes('TELE')) {\n        allocateMarkers(curr, aTELE);\n      }\n    }\n    return accum;\n  }, []);\n  return projects;\n}\nfunction addMarkersEdgeCases(projects) {\n  projects.reduce((accum, curr) => {\n    const P = Projects.find(d => d.p_ID === curr.project_ID);\n    if (P) {\n      if (P.p_fields.includes('Civil')) {\n        allocateMarkers(curr, aCIVIL);\n      } else if (P.p_fields.includes('Electrical')) {\n        allocateMarkers(curr, aELEC);\n      } else if (P.p_fields.includes('Electronics')) {\n        allocateMarkers(curr, aELEC);\n      } else if (P.p_fields.includes('Mechanical')) {\n        allocateMarkers(curr, aMECH);\n      } else if (P.p_fields.includes('Mechatronics')) {\n        allocateMarkers(curr, aMTRN);\n      } else if (P.p_fields.includes('Software')) {\n        allocateMarkers(curr, aCOMP);\n      } else if (P.p_fields.includes('Telecommunication')) {\n        allocateMarkers(curr, aTELE);\n      }\n    }\n    return accum;\n  }, []);\n  return projects;\n}\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","jsxDEV","_jsxDEV","Academics","ProjectsAloc","Students","Supervisors","Projects","AllAssigned","Test","presSched","allocatedProjects","projectAllocations","aCIVIL","aCOMP","aELEC","aMECH","aMTRN","aTELE","App","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","markerAlgorithm","exportMarkerData","presentationScheduler","exportPresentationData","href","target","rel","_c","sort","a","b","supervisor_ID","localeCompare","undefined","numeric","sensitivity","presIDCounter","dayofWeek","dayCount","seshArr","timeCount","studentsPerRoomPerSesh","allPresPerSesh","length","numberOfClassrooms","Math","ceil","classroomNum","chairIDarr","secondMarkerIDarr","i","tempPres","presentationID","classroomNumber","time","day","chairID","secondMarkerID","push","presentation_ID","console","log","addStudentDisciplines","addAcademicCaps","addSupervisorCap","sortAcademics","getUnitDiscipline","addStUnitDisToPA","addMarkers","addMarkersEdgeCases","loadBalance","allocateProjects","api_url","students","fetch","json","parseFloat","st_WAM","allProjects","supervisors","selfProposed","preferences","disciplines","unallocatable","allocTemp","superIDX","allocated","numberOfruns","selfie","hasSelfProposed","st_ID","findSupervisorIDX","sp_supervisor_ID","s_capacity","s_current_load","s_ID","project_ID","second_marker_ID","prefIDX","findPreferencesIDX","j","strKey","projectIDX","findProjectIDX","p_size","p_supervisor","p_ID","numberOfProjectsTried","floor","random","st_unit","p_fields","includes","studnetID","selfPrj","sp_student_ID","superVisor","superArr","studentID","prefs","pr_student_ID","prjIDX","projects","jsonString","encodeURIComponent","JSON","stringify","link","document","createElement","download","click","getapi","url","resAcademics","resStudents","resProjectsAloc","resSupervisors","resProjects","resTest","markers","a_cap","temp","map","element","st_disciplineID","partialStudentDetails","combined","find","itmInner","reduce","accum","curr","S","s","a_ID","a_discipline","allocateMarkers","project","next","shift","P","d","$RefreshReg$"],"sources":["/Users/lucagonzalez/NetBeansProjects/comp4050Clone/comp4050/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\nvar Academics;\nvar ProjectsAloc;\nvar Students;\nvar Supervisors;\nvar Projects;\nvar AllAssigned = [];\nvar Test;\n\nvar presSched = [];\nvar allocatedProjects;\n\n//luca's globals\nlet projectAllocations = [];\n\nvar aCIVIL = [];\nvar aCOMP = [];\nvar aELEC = [];\nvar aMECH = [];\nvar aMTRN = [];\nvar aTELE = [];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <button type=\"button\" onClick={markerAlgorithm}>\n          Allocate Markers\n        </button>\n        <button type=\"button\" onClick={exportMarkerData}>\n          Export Marker Data\n        </button>\n        <button type=\"button\" onClick={presentationScheduler}>\n          Allocate Markers\n        </button>\n        <button type=\"button\" onClick={exportPresentationData}>\n          Export Presentation Data\n        </button>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nfunction presentationScheduler() {\n  //Sort allocated Projects by supervisor as a Optimization -> Presentation more likely to have the same supervisor\n  //Problem/edge case: how to prevent same supervisor in multiple rooms at the same time?\n  let allocatedProjects = ProjectsAloc;\n\n  allocatedProjects.sort((a, b) => {\n    return a.supervisor_ID.localeCompare(b.supervisor_ID, undefined, {\n      numeric: true,\n      sensitivity: 'base',\n    });\n  });\n  //console.log(allocatedProjects);\n\n  /* Schema\n  presentationID        -> +1 every 12 students\n  classroomNumber       -> for MVP, classroomNum = 1,2,3 ... substitues room code\n  time                  -> AM or PM\n  day                   -> Mon Tue or Wed\n  chairID (-1)\n  secondMarkerID (-1) \n  */\n  // To be populated with final Presentation Schedule to print [{...} , {...} , ...]\n\n  //Data to be built according to schema\n  let presIDCounter = 1; //Unique presID = 0,1,2,3 ...\n\n  let dayofWeek = ['Mon', 'Tue', 'Wed']; //preset for MVP\n  let dayCount = 0; // use for idx of dayofweek\n\n  let seshArr = ['AM', 'PM']; //Only 2 sessions/times per day\n  let timeCount = 0; // use for idx of seshArr //redundant/can just use presIDcounter\n\n  // Calculating no of classrooms needed\n  let studentsPerRoomPerSesh = 12; // 3hr sesh, 15min per pres = 12 presentations per sesh per room\n  let allPresPerSesh =\n    studentsPerRoomPerSesh * dayofWeek.length * seshArr.length; //should be 12*3*2 = 72\n  let numberOfClassrooms = Math.ceil(allocatedProjects.length / allPresPerSesh); // no of presentations/persentations per sesh = num of classrooms we need\n  let classroomNum = 1;\n\n  // Implementing chairID and secondMarkerID\n\n  // No idea how this needs to be done\n  // implementing chairID as picking between a predefined list of academics\n  //(that way if kate wants to do all of them she can just self nominate herself and hazer can say which ones he wants working on it)\n  let chairIDarr = [\n    466997, 465796, 466347, 469056, 469004, 463817, 460162, 467174, 465304,\n    466355, 466074, 465382, 461209, 460413, 469840, 462845, 469302,\n  ];\n  // setting second marker as the last supervisor in the same sesh, or maybe a predefined array?\n  let secondMarkerIDarr = [\n    466997, 465796, 466347, 469056, 469004, 463817, 460162, 467174, 465304,\n    466355, 466074, 465382, 461209, 460413, 469840, 462845, 469302,\n  ];\n\n  //Scheduling Alg\n  for (let i = 0; i < allocatedProjects.length; i++) {\n    if (i % 12 == 0) {\n      //for every batch of 12 students\n      let tempPres = {}; // Used to build object according to schema before pusing onto presSched\n\n      // Update the presentation properties\n      tempPres.presentationID = presIDCounter;\n      tempPres.classroomNumber = classroomNum;\n      tempPres.time = seshArr[timeCount % seshArr.length];\n      tempPres.day = dayofWeek[dayCount % dayofWeek.length];\n\n      //Implementation 1: using preset array of chairID and second Marker IDs\n      //tempPres.chairID = chairIDarr [presIDCounter-1 % chairIDarr.length];\n      //tempPres.secondMarkerID = secondMarkerIDarr [presIDCounter-1 % secondMarkerIDarr.length];\n\n      //implementation 2:\n      //could also allocate chair as whoever's supervising in that sesh first\n      tempPres.chairID = allocatedProjects[i].supervisor_ID;\n      //second marker could be the last supervisor in the same sesh.\n      if (\n        allocatedProjects[i + 11] &&\n        allocatedProjects[i + 11].supervisor_ID\n      ) {\n        tempPres.secondMarkerID = allocatedProjects[i + 11].supervisor_ID;\n      } else {\n        //if not enough people in the sesh,\n        tempPres.secondMarkerID = allocatedProjects[i].supervisor_ID; // make second marker same as first supervisor\n      }\n\n      // Add the presentation to the schedule\n      presSched.push(tempPres);\n\n      /*\n      ==>Order of change: time, classroom then day. \n      e.g.\n      For 2 classrooms C1 and C2, the presID 1,2,3 ... should represent\n      MonC1AM, MonC1PM, MonC2AM, MonC2PM, TueC1Am ... \n      */\n\n      // Increment counters based on the desired order of change\n      timeCount++;\n      if (timeCount % seshArr.length === 0) {\n        //AM/PM switch\n        classroomNum++;\n      }\n      if (classroomNum > numberOfClassrooms) {\n        //Cycles through classrooms\n        classroomNum = 1;\n        dayCount++;\n      }\n\n      // Increment presentation ID for each batch of students\n      presIDCounter++;\n    }\n    // Assign presentation ID to the allocated project\n    allocatedProjects[i].presentation_ID = presIDCounter - 1;\n  }\n  console.log(presSched);\n  console.log(allocatedProjects);\n}\n\nfunction markerAlgorithm() {\n  Students = addStudentDisciplines();\n  Academics = addAcademicCaps();\n  addSupervisorCap();\n  sortAcademics();\n  Students = getUnitDiscipline();\n  ProjectsAloc = addStUnitDisToPA();\n  ProjectsAloc = addMarkers(ProjectsAloc);\n  ProjectsAloc = addMarkersEdgeCases(ProjectsAloc);\n  loadBalance(Academics);\n  console.log(Academics);\n  console.log(ProjectsAloc);\n}\n////////////////////////////////////\n\nasync function allocateProjects() {\n  const api_url = 'tba';\n\n  let students = (await fetch('Student.json')).json();\n  students.sort((a, b) => parseFloat(b.st_WAM) - parseFloat(a.st_WAM));\n\n  let allProjects = await fetch('Projects.json').json();\n  let supervisors = await fetch('Academic.json').json();\n  console.log('allProjects');\n  let selfProposed = await fetch('SelfProposedProject.json').json();\n\n  let preferences = (await fetch('Preferences.json')).json();\n\n  let disciplines = (await fetch('Discipline.json')).json();\n\n  let unallocatable = [];\n  let allocTemp = {};\n  let superIDX;\n  let allocated = false;\n  let numberOfruns = 0;\n\n  for (let i = 0; i < students.length; i++) {\n    numberOfruns++;\n    allocated = false;\n    let selfie = hasSelfProposed(students[i].st_ID, selfProposed);\n    if (selfie != -1) {\n      superIDX = findSupervisorIDX(\n        selfProposed[selfie].sp_supervisor_ID,\n        supervisors\n      );\n      if (superIDX >= 0) {\n        if (\n          supervisors[superIDX].s_capacity <\n          supervisors[superIDX].s_current_load\n        ) {\n          //find out if s_capacity is maxCapacity or current???\n          //atm treating as current.\n\n          supervisors[superIDX].s_current_load++;\n\n          allocTemp.s_ID = students[i].st_ID;\n          allocTemp.supervisor_ID = selfProposed[selfie].sp_supervisor_ID;\n          allocTemp.project_ID = -1; //find out if i add projects from self proposed to allProjects after allocation. And give it an ID\n          allocTemp.second_marker_ID = -1;\n          allocTemp.presentation_ID = -1;\n\n          projectAllocations.push(allocTemp);\n          allocTemp = {};\n\n          continue;\n        }\n      }\n    }\n    let prefIDX = findPreferencesIDX(students[i].st_ID, preferences);\n    if (prefIDX != -1) {\n      for (let j = 1; j < 5; j++) {\n        let strKey = 'pr_pref' + j;\n        let projectIDX = findProjectIDX(\n          preferences[prefIDX][strKey],\n          allProjects\n        ); //can I use strKey like that?\n        if (projectIDX != -1) {\n          if (allProjects[projectIDX].p_size > 0) {\n            superIDX = findSupervisorIDX(\n              allProjects[projectIDX].p_supervisor,\n              supervisors\n            );\n            if (\n              supervisors[superIDX].s_capacity <\n              supervisors[superIDX].s_current_load\n            ) {\n              allocTemp.s_ID = students[i].st_ID;\n              allocTemp.supervisor_ID = allProjects[projectIDX].p_supervisor;\n              allocTemp.project_ID = allProjects[projectIDX].p_ID;\n              allocTemp.second_marker_ID = -1;\n              allocTemp.presentation_ID = -1;\n\n              projectAllocations.push(allocTemp);\n              allocTemp = {};\n\n              allProjects[projectIDX].p_size--;\n\n              supervisors[superIDX].s_current_load++;\n              allocated = true;\n              break;\n            }\n          }\n        }\n      }\n\n      //allocate random\n    }\n\n    let numberOfProjectsTried = 0;\n\n    while (allocated == false) {\n      allocTemp = {};\n      allocTemp.s_ID = students[i].st_ID;\n      let projectIDX = Math.floor(Math.random() * allProjects.length);\n      allocTemp.supervisor_ID = allProjects[projectIDX].p_supervisor;\n      allocTemp.project_ID = allProjects[projectIDX].p_ID;\n      allocTemp.second_marker_ID = -1;\n      allocTemp.presentation_ID = -1;\n\n      //find supervisor allocation weight\n      superIDX = findSupervisorIDX(allocTemp.supervisor_ID, supervisors);\n\n      if (\n        supervisors[superIDX].s_capacity > 0 &&\n        allProjects[projectIDX].p_size > 0\n      ) {\n        if (\n          (students[i].st_unit == 'COMP4092' &&\n            allProjects[projectIDX].p_fields.includes('Software')) ||\n          (students[i].st_unit == 'CIVIL4092' &&\n            allProjects[projectIDX].p_fields.includes('Civil')) ||\n          (students[i].st_unit == 'ELEC4092' &&\n            allProjects[projectIDX].p_fields.includes('Electrical')) ||\n          (students[i].st_unit == 'ELEC4092' &&\n            allProjects[projectIDX].p_fields.includes('Electronics')) ||\n          (students[i].st_unit == 'MECH4092' &&\n            allProjects[projectIDX].p_fields.includes('Mechanical')) ||\n          (students[i].st_unit == 'MTRN4092' &&\n            allProjects[projectIDX].p_fields.includes('Mechatronics')) ||\n          (students[i].st_unit == 'TELE4092' &&\n            allProjects[projectIDX].p_fields.includes('Telecommunications'))\n        ) {\n          //this condition may cause an infinite loop fix later\n          allProjects[projectIDX].p_size--;\n\n          supervisors[superIDX].s_current_load++;\n\n          projectAllocations.push(allocTemp);\n\n          allocated = true;\n        }\n      }\n\n      numberOfProjectsTried++;\n\n      if (numberOfProjectsTried > 1000) {\n        console.log('tried 1000 times could not find a project for this kid');\n        unallocatable.push(allocTemp);\n        break;\n      }\n    }\n  }\n\n  console.log(unallocatable);\n}\n\nfunction hasSelfProposed(studnetID, selfPrj) {\n  for (let i = 0; i < selfPrj.length; i++) {\n    if (studnetID == selfPrj[i].sp_student_ID) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n//finds supervisor index based on supervisor id\nfunction findSupervisorIDX(superVisor, superArr) {\n  for (let i = 0; i < superArr.length; i++) {\n    if (superVisor.localeCompare(superArr[i].s_ID)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction findPreferencesIDX(studentID, prefs) {\n  for (let i = 0; i < prefs.length; i++) {\n    if (studentID == prefs[i].pr_student_ID) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction findProjectIDX(prjIDX, projects) {\n  for (let i = 0; i < projects.length; i++) {\n    if (prjIDX == projects[i].p_ID) {\n      return i;\n    }\n  }\n  return -1;\n}\n////////////////////////////////////////\nconst exportMarkerData = () => {\n  const jsonString = `data:text/json;chatset=utf-8,${encodeURIComponent(\n    JSON.stringify(allocatedProjects)\n  )}`;\n  const link = document.createElement('a');\n  link.href = jsonString;\n  link.download = 'data.json';\n\n  link.click();\n};\n\nconst exportPresentationData = () => {\n  const jsonString = `data:text/json;chatset=utf-8,${encodeURIComponent(\n    JSON.stringify(presSched)\n  )}`;\n  const link = document.createElement('a');\n  link.href = jsonString;\n  link.download = 'data.json';\n\n  link.click();\n};\n\n// api url\nconst api_url = 'http://time.jsontest.com';\n\n// Defining async function\nasync function getapi(url) {\n  // Storing response\n  const resAcademics = await fetch('Academic.json');\n  const resStudents = await fetch('Student.json');\n  const resProjectsAloc = await fetch('lucasProjectAlloc.json');\n  const resSupervisors = await fetch('Supervisor.json');\n  const resProjects = await fetch('Projects.json');\n  const resTest = await fetch(api_url);\n\n  // Storing data in form of JSON\n  Academics = await resAcademics.json();\n  Students = await resStudents.json();\n  ProjectsAloc = await resProjectsAloc.json();\n  Supervisors = await resSupervisors.json();\n  Projects = await resProjects.json();\n  Test = await resTest.json();\n\n  console.log(Test);\n}\n\n// Calling that async function\ngetapi(api_url);\n\nfunction loadBalance(markers) {\n  markers.sort((a, b) => {\n    return b.a_cap - a.a_cap;\n  });\n}\nfunction addStudentDisciplines() {\n  const temp = Students.map((element) => {\n    return (element = {\n      ...(element.st_unit.includes('CIVIL') && {\n        ...element,\n        st_disciplineID: 1,\n      }),\n      ...(element.st_unit.includes('ELEC') && {\n        ...element,\n        st_disciplineID: 3,\n      }),\n      ...(element.st_unit.includes('MECH') && {\n        ...element,\n        st_disciplineID: 4,\n      }),\n      ...(element.st_unit.includes('MTRN') && {\n        ...element,\n        st_disciplineID: 5,\n      }),\n      ...(element.st_unit.includes('COMP') && {\n        ...element,\n        st_disciplineID: 6,\n      }),\n      ...(element.st_unit.includes('TELE') && {\n        ...element,\n        st_disciplineID: 7,\n      }),\n      ...(element.st_unit.includes('ENGG') && {\n        ...element,\n        st_disciplineID: 8,\n      }),\n    });\n  });\n  return temp;\n}\n\nfunction addAcademicCaps() {\n  const temp = Academics.map((element) => {\n    return (element = {\n      ...{ ...element, a_cap: 10 },\n    });\n  });\n  return temp;\n}\n\nfunction getUnitDiscipline() {\n  let partialStudentDetails = Students.map(\n    ({ st_ID, st_disciplineID, st_unit }) => ({\n      st_ID,\n      st_disciplineID,\n      st_unit,\n    })\n  );\n  return partialStudentDetails;\n}\n\nfunction addStUnitDisToPA() {\n  let combined = [];\n  for (let i = 0; i < ProjectsAloc.length; i++) {\n    combined.push({\n      ...ProjectsAloc[i],\n      ...Students.find((itmInner) => itmInner.st_ID === ProjectsAloc[i].st_ID),\n    });\n  }\n  return combined;\n}\n\nfunction addSupervisorCap() {\n  var temp = Academics.reduce((accum, curr) => {\n    const S = Supervisors.find((s) => s.s_ID === curr.a_ID);\n    if (S) {\n      curr.a_cap = S.s_capacity - S.s_current_load;\n    }\n    return accum;\n  });\n  return temp;\n}\n\nfunction sortAcademics() {\n  for (let element of Academics) {\n    switch (element.a_discipline) {\n      case 1:\n        aCIVIL.push(element);\n        break;\n      case 2:\n        aELEC.push(element);\n        break;\n      case 3:\n        aELEC.push(element);\n        break;\n      case 4:\n        aMECH.push(element);\n        break;\n      case 5:\n        aMTRN.push(element);\n        break;\n      case 6:\n        aCOMP.push(element);\n        break;\n      case 7:\n        aTELE.push(element);\n        break;\n      default:\n        console.log('new unit');\n        break;\n    }\n  }\n}\n\nfunction allocateMarkers(project, markers) {\n  if (project.second_marker_ID !== -1) {\n    return project;\n  }\n  loadBalance(markers);\n  var next;\n  while (markers.length > 0) {\n    next = markers.shift();\n    if (next.a_ID === project.supervisor_ID) {\n      markers.push(next);\n    } else {\n      if (next.a_cap > 0) {\n        project.second_marker_ID = next.a_ID;\n        next.a_cap--;\n        markers.push(next);\n        return project;\n      }\n    }\n  }\n\n  return project;\n}\n\nfunction addMarkers(projects) {\n  projects.reduce((accum, curr) => {\n    const P = Students.find((d) => d.st_ID === curr.st_ID);\n    if (P) {\n      if (P.st_unit.includes('CIVIL')) {\n        allocateMarkers(curr, aCIVIL);\n      } else if (P.st_unit.includes('ELEC')) {\n        allocateMarkers(curr, aELEC);\n      } else if (P.st_unit.includes('MECH')) {\n        allocateMarkers(curr, aMECH);\n      } else if (P.st_unit.includes('MTRN')) {\n        allocateMarkers(curr, aMTRN);\n      } else if (P.st_unit.includes('COMP')) {\n        allocateMarkers(curr, aCOMP);\n      } else if (P.st_unit.includes('TELE')) {\n        allocateMarkers(curr, aTELE);\n      }\n    }\n    return accum;\n  }, []);\n  return projects;\n}\n\nfunction addMarkersEdgeCases(projects) {\n  projects.reduce((accum, curr) => {\n    const P = Projects.find((d) => d.p_ID === curr.project_ID);\n    if (P) {\n      if (P.p_fields.includes('Civil')) {\n        allocateMarkers(curr, aCIVIL);\n      } else if (P.p_fields.includes('Electrical')) {\n        allocateMarkers(curr, aELEC);\n      } else if (P.p_fields.includes('Electronics')) {\n        allocateMarkers(curr, aELEC);\n      } else if (P.p_fields.includes('Mechanical')) {\n        allocateMarkers(curr, aMECH);\n      } else if (P.p_fields.includes('Mechatronics')) {\n        allocateMarkers(curr, aMTRN);\n      } else if (P.p_fields.includes('Software')) {\n        allocateMarkers(curr, aCOMP);\n      } else if (P.p_fields.includes('Telecommunication')) {\n        allocateMarkers(curr, aTELE);\n      }\n    }\n    return accum;\n  }, []);\n  return projects;\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}